class BLEDevice{constructor(e,t,i,s,n){if(this.namePrefix=e,this.writeServiceUuid=t,this.notifyServiceUuid=i,this.writeCharUuid=s,this.notifyCharUuid=n,this.deviceName="",this.server=null,this.writeChar=null,this.notifyChar=null,this.constructor==BLEDevice)throw new Error("Abstract classes can't be instantiated.")}async connect(){try{if(void 0!==navigator.bluetooth.getDevices){(await navigator.bluetooth.getDevices()).length>0&&(this.device=self.devices.find((e=>e.name.startsWith(this.namePrefix))))}this.device||(this.device=await navigator.bluetooth.requestDevice({filters:[{namePrefix:this.namePrefix}],optionalServices:[this.writeServiceUuid,this.notifyServiceUuid]})),console.log(`Connecting to device ${this.device.name}`),this.server=await this.device.gatt.connect();const e=await this.server.getPrimaryService(this.writeServiceUuid),t=await this.server.getPrimaryService(this.notifyServiceUuid);this.writeChar=await e.getCharacteristic(this.writeCharUuid),this.notifyChar=await t.getCharacteristic(this.notifyCharUuid),await this.notifyChar.startNotifications(),await this.notifyChar.addEventListener("characteristicvaluechanged",this.read.bind(this)),this.onConnect(),this.device.addEventListener("gattserverdisconnected",this.onServerDisconnected.bind(this))}catch(e){this.onError(e)}}async write(e){await this.writeChar.writeValue(e)}async disconnect(){this.device.gatt.connected?await this.device.gatt.disconnect():console.log("Bluetooth Device is already disconnected"),this.onDisconnect()}onServerDisconnected(){console.log("Disonnected from gaat server")}read(e){this.onData(e.target.value)}onConnect(){console.log(`Connected to ${this.device.name}`)}onDisconnect(){console.log(`Disonnected from ${this.device.name}`)}onData(e){console.log(e)}onError(e){console.error(e)}}
const NAME_PREFIX="RNG-SYNC",WRITE_SERVICE_UUID="00000001-0000-1000-8000-00805f9b34fb",NOTIFY_SERVICE_UUID="00000001-0000-1000-8000-00805f9b34fb",WRITE_CHAR_UUID="00000002-0000-1000-8000-00805f9b34fb",NOTIFY_CHAR_UUID="00000003-0000-1000-8000-00805f9b34fb";class RNGSyNC extends BLEDevice{constructor(){super("RNG-SYNC",WRITE_SERVICE_UUID,NOTIFY_SERVICE_UUID,WRITE_CHAR_UUID,NOTIFY_CHAR_UUID)}async start(){await this.connect()}async stop(){await this.disconnect(),this.timer&&window.clearInterval(this.timer)}async sendCommand(e=""){console.log(`writing: ${e}`);const t=new TextEncoder("utf-8");await this.writeChar.writeValue(t.encode(e))}onConnect(){super.onConnect(),document.querySelectorAll(".hide").forEach((e=>{e.classList.remove("hidden")})),document.querySelector("#search").classList.add("hidden"),"stats"==document.querySelector(".tab.active").id&&document.querySelector(".tab.active").click()}onDisconnect(){super.onDisconnect(),document.querySelectorAll(".hide").forEach((e=>{e.classList.add("hidden")})),document.querySelector("#search").classList.remove("hidden")}onServerDisconnected(){this.onDisconnect(),document.querySelector("#response").textContent="Bluetooth disconnected"}onData(e){const t=new TextDecoder("utf-8").decode(e);if(t){console.log(`data received: ${t}`);var n={};try{"stats"==(n=JSON.parse(t)).__command?this.renderStats(n):this.renderForm(n)}catch(e){console.error("onData: ",e)}}}onError(e){document.querySelector("#response").textContent=e,super.onError(e)}async fetchData(e){document.querySelector("#tab-area").textContent="Loading..";var t={__command:"read"};e.split(",").forEach((e=>{t[e]=""})),console.log(t),await this.sendCommand(JSON.stringify(t))}async saveData(){document.querySelector("#response").textContent="Saving..";var e={__command:"write"};document.querySelectorAll('[data-field*="true"]').forEach((t=>{"boolean"==t.dataset.type?e[t.dataset.key]=!t.classList.contains("off"):"number"==t.dataset.type?e[t.dataset.key]=parseInt(t.value):e[t.dataset.key]=t.value})),document.querySelector("#tab-area").textContent="",console.log(e),await this.sendCommand(JSON.stringify(e))}async onTabClick(e){document.querySelectorAll(".tab").forEach((e=>e.classList.remove("active"))),e.currentTarget.classList.add("active"),await this.fetchData(e.currentTarget.dataset.fields)}renderStats(e){const t=document.getElementById("tab-area");t.innerHTML="";const n=Object.keys(e).sort();var a='<div class="grid-container">';n.forEach((t=>{"__command"!=t&&"__result"!=t&&(a+=`\n        <div class="grid-item">\n          <div class="label">${t.replace("_"," ")}</div>\n          <div class="value">${e[t]}</div>\n        </div>\n        `)})),a+="</div>",t.innerHTML=a}renderForm(e){const t=document.getElementById("tab-area"),n=document.querySelector(".tab.active").dataset.fields.split(","),a=Object.keys(e).sort(((e,t)=>n.indexOf(e)-n.indexOf(t)));t.innerHTML="",a.forEach((n=>{const a=e[n];var c=null;if(null==a||"__command"==n||"__result"==n||("boolean"==typeof a?((c=document.createElement("div")).className="toggle"+(a?"":" off"),c.innerHTML='<div class="tab"></div>',c.onclick=this.toggleElement):"string"==typeof a?((c=document.createElement("input")).className="input",c.setAttribute("type","text"),c.setAttribute("value",a)):"number"==typeof a&&((c=document.createElement("input")).className="input",c.setAttribute("type","number"),c.setAttribute("min",1),c.setAttribute("value",a))),c){const e=document.createElement("div");e.className="input-label",e.innerText=n.replaceAll("_"," ")+":",c.dataset.field=!0,c.dataset.key=n,c.dataset.type=typeof a,t.appendChild(e),t.appendChild(c)}})),document.querySelector("#response").textContent=e.__result?e.__result+"..":""}toggleElement(e){e.target.classList.toggle("off")}}window.addEventListener("DOMContentLoaded",(async()=>{let e=new RNGSyNC;document.querySelector("#search").addEventListener("click",(async()=>await e.start())),document.querySelector("#disconnect").addEventListener("click",(async()=>await e.stop())),document.querySelector("#save").addEventListener("click",(async()=>await e.saveData())),document.querySelectorAll(".tab").forEach((t=>{t.addEventListener("click",e.onTabClick.bind(e))})),window.addEventListener("beforeunload",(async()=>await e.stop()))}));
